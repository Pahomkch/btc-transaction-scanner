#!/usr/bin/env node

import * as fs from 'fs';
import * as path from 'path';
import { BlockMonitor } from './services/block-monitor';
import { Config } from './types/bitcoin';

/**
 * –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Bitcoin Transaction Scanner
 *
 * –≠—Ç–æ—Ç –±–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç Bitcoin –±–ª–æ–∫–∏ –≤ real-time –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏ –≤ stdout –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
 */

class BitcoinTransactionScanner {
  private monitor: BlockMonitor;
  private config: Config;

  constructor() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.config = this.loadConfiguration();
    this.monitor = new BlockMonitor(this.config);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    this.setupSignalHandlers();
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  private loadConfiguration(): Config {
    let config: Config;

    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const configPath = process.env.CONFIG_PATH ||
        path.join(__dirname, '../src/config/config.json');

      if (fs.existsSync(configPath)) {
        const configFile = fs.readFileSync(configPath, 'utf8');
        config = JSON.parse(configFile);
        console.log(`Configuration loaded from: ${configPath}`);
      } else {
        throw new Error('Config file not found');
      }

    } catch (error) {
      console.warn('Failed to load config file, using environment variables');

      // Fallback –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
      config = {
        rpcUrl: process.env.BTC_RPC_URL || 'http://localhost:8332',
        addresses: this.parseAddressesFromEnv(),
        pollingIntervalMs: parseInt(process.env.POLLING_INTERVAL_MS || '5000'),
        maxMemoryMB: parseInt(process.env.MAX_MEMORY_MB || '512'),
        usdPriceEnabled: process.env.USD_PRICE_ENABLED === 'true',
        logLevel: (process.env.LOG_LEVEL as any) || 'info'
      };
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    this.validateConfiguration(config);

    return config;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –∞–¥—Ä–µ—Å–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  private parseAddressesFromEnv(): Config['addresses'] {
    const addressesEnv = process.env.WATCHED_ADDRESSES;
    if (!addressesEnv) {
      throw new Error('No addresses configured. Set WATCHED_ADDRESSES environment variable');
    }

    try {
      return JSON.parse(addressesEnv);
    } catch (error) {
      // –ï—Å–ª–∏ –Ω–µ JSON, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤
      const addresses = addressesEnv.split(',').map(addr => addr.trim());
      return addresses.map(address => ({
        address,
        name: address,
        type: 'legacy' as const // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º legacy
      }));
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
   */
  private validateConfiguration(config: Config): void {
    if (!config.rpcUrl) {
      throw new Error('RPC URL is required');
    }

    if (!config.addresses || config.addresses.length === 0) {
      throw new Error('At least one address must be configured');
    }

    if (config.addresses.length > 1000) {
      console.warn(`Warning: ${config.addresses.length} addresses configured. Performance may be impacted.`);
    }

    if (config.pollingIntervalMs < 1000) {
      console.warn('Warning: Very short polling interval may cause rate limiting');
    }

    if (config.maxMemoryMB < 128) {
      console.warn('Warning: Memory limit is very low, may cause performance issues');
    }

    console.log('Configuration validated successfully');
    console.log(`- RPC URL: ${config.rpcUrl}`);
    console.log(`- Watched addresses: ${config.addresses.length}`);
    console.log(`- Polling interval: ${config.pollingIntervalMs}ms`);
    console.log(`- Memory limit: ${config.maxMemoryMB}MB`);
    console.log(`- USD conversion: ${config.usdPriceEnabled ? 'enabled' : 'disabled'}`);
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
   */
  private setupSignalHandlers(): void {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
    process.on('SIGINT', async () => {
      console.log('\nReceived SIGINT, shutting down gracefully...');
      await this.shutdown();
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ TERM —Å–∏–≥–Ω–∞–ª–∞
    process.on('SIGTERM', async () => {
      console.log('\nReceived SIGTERM, shutting down gracefully...');
      await this.shutdown();
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    process.on('uncaughtException', (error) => {
      console.error('Uncaught Exception:', error);
      process.exit(1);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
    process.on('unhandledRejection', (reason, promise) => {
      console.error('Unhandled Rejection at:', promise, 'reason:', reason);
      process.exit(1);
    });
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Bitcoin –±–ª–æ–∫–æ–≤
   * Async —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —Å—Ç–∞—Ä—Ç–∞
   */
  async start(): Promise<void> {
    try {
      console.log('üöÄ Starting Bitcoin Transaction Scanner...');
      console.log('üì° Connecting to Bitcoin network...');

      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫–æ–≤
      // Async start –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–∫–∞ –∏–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      await this.monitor.start();

      console.log('‚úÖ Bitcoin Transaction Scanner is running');
      console.log('üìä Watching for transactions on configured addresses...');
      console.log('üìÑ Transaction notifications will be logged to stdout as JSON');
      console.log('üîÑ Press Ctrl+C to stop');

      // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
      this.startStatusReporting();

    } catch (error) {
      console.error('‚ùå Failed to start Bitcoin Transaction Scanner:', error);
      process.exit(1);
    }
  }

  /**
   * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã —Å–∫–∞–Ω–µ—Ä–∞
   */
  private startStatusReporting(): void {
    setInterval(() => {
      const status = this.monitor.getStatus();
      console.log(`üìà Status: Block ${status.lastProcessedBlock}, ` +
                 `${status.watchedAddresses} addresses, ` +
                 `${status.memoryUsage.toFixed(1)}MB memory`);
    }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  }

  /**
   * Graceful shutdown —Å–∫–∞–Ω–µ—Ä–∞
   */
  private async shutdown(): Promise<void> {
    try {
      console.log('üõë Stopping Bitcoin Transaction Scanner...');

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
      await this.monitor.stop();

      console.log('‚úÖ Bitcoin Transaction Scanner stopped successfully');
      process.exit(0);

    } catch (error) {
      console.error('‚ùå Error during shutdown:', error);
      process.exit(1);
    }
  }
}

/**
 * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 */
async function main(): Promise<void> {
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º banner –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  console.log('');
  console.log('‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ');
  console.log('‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó');
  console.log('‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë         ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù');
  console.log('‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë         ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó');
  console.log('‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë');
  console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù');
  console.log('');
  console.log('üîç Bitcoin Transaction Scanner v1.0.0');
  console.log('üìù Real-time monitoring of Bitcoin addresses with JSON notifications');
  console.log('‚ö° Built with TypeScript for performance and reliability');
  console.log('');

  // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–µ—Ä
  const scanner = new BitcoinTransactionScanner();
  await scanner.start();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(error => {
    console.error('Fatal error:', error);
    process.exit(1);
  });
}

export { BitcoinTransactionScanner };
