// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const NODE_URL = 'https://neat-tame-pond.btc.quiknode.pro/91ba64a3b7d2ced2d16fff2eb260106323aba0c0';
const TYPES = ['P2PKH', 'P2SH', 'P2SH-P2WPKH', 'P2WPKH'] as const;
type AddressType = typeof TYPES[number];

// –†–µ–∑—É–ª—å—Ç–∞—Ç: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ö—Ä–∞–Ω–∏–º incoming, outgoing, both
interface ResultEntry {
  incoming?: string;
  outgoing?: string;
  both?: string;
}

const result: Record<AddressType, ResultEntry> = {
  P2PKH: {},
  P2SH: {},
  'P2SH-P2WPKH': {},
  P2WPKH: {},
};

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface RpcResponse<T> {
  result: T;
  error: any;
  id: string;
}

interface Vin {
  coinbase?: string;
  txid?: string;
  scriptSig?: {
    asm: string;
    hex: string;
  };
  addresses?: string[];
  txinwitness?: string[];
}

interface Vout {
  scriptPubKey: {
    address?: string;
    addresses?: string[];
    type: string;
    hex: string;
  };
}

interface Tx {
  txid: string;
  vin: Vin[];
  vout: Vout[];
}

interface Block {
  hash: string;
  height: number;
  tx: Tx[];
}

// HTTPS POST-–∑–∞–ø—Ä–æ—Å
function rpcCall<T>(method: string, params: any[] = []): Promise<T> {
  return new Promise((resolve, reject) => {
    const body = JSON.stringify({
      jsonrpc: '2.0',
      method,
      params,
      id: '1',
    });

    const url = new URL(NODE_URL);
    const options = {
      hostname: url.hostname,
      port: url.port,
      path: url.pathname,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(body),
      },
    };

    const req = (url.protocol === 'https:' ? require('https') : require('http')).request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => (data += chunk));
      res.on('end', () => {
        try {
          const json = JSON.parse(data) as RpcResponse<T>;
          if (json.error) {
            reject(new Error(`RPC Error: ${json.error.message || json.error}`));
          } else {
            resolve(json.result);
          }
        } catch (e) {
          reject(new Error(`Parse error: ${e instanceof Error ? e.message : e}`));
        }
      });
    });

    req.on('error', reject);
    req.write(body);
    req.end();
  });
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–¥—Ä–µ—Å–∞
function classifyAddress(addr: string, vout?: Vout): AddressType | null {
  if (addr.startsWith('1') && /^[1-9a-km-zA-HJ-NP-Z]{25,34}$/.test(addr)) {
    return 'P2PKH';
  }
  if (addr.startsWith('3') && /^[1-9a-km-zA-HJ-NP-Z]{25,34}$/.test(addr)) {
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ P2SH-P2WPKH –ª–∏ —ç—Ç–æ
    if (vout?.scriptPubKey.hex?.toLowerCase().startsWith('a914') && vout.scriptPubKey.hex.length === 44) {
      const redeemHex = vout.scriptPubKey.hex.slice(4, -2); // –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      if (redeemHex.startsWith('0014') && redeemHex.length === 44) {
        return 'P2SH-P2WPKH';
      }
    }
    return 'P2SH';
  }
  if (addr.startsWith('bc1q') && (addr.length === 42 || addr.length === 62)) {
    return 'P2WPKH';
  }
  return null;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('–ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞...');
    const blockCount = await rpcCall<number>('getblockcount');
    console.log(`–ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫: ${blockCount}`);

    const blockHash = await rpcCall<string>('getblockhash', [blockCount]);
    console.log(`–•—ç—à –±–ª–æ–∫–∞: ${blockHash}`);

    const block = await rpcCall<Block>('getblock', [blockHash, 2]);
    console.log(`\n‚úÖ –ë–ª–æ–∫ ${block.height} –∑–∞–≥—Ä—É–∂–µ–Ω.`);
    console.log(`üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–ª–æ–∫–µ: ${block.tx.length}`);

    // –ú–Ω–æ–∂–µ—Å—Ç–≤–∞: –∫—Ç–æ —á—Ç–æ –¥–µ–ª–∞–ª
    const incomingSet = new Set<string>();
    const outgoingSet = new Set<string>();

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ (–≤ vout)
    for (const tx of block.tx) {
      if (tx.vin.length === 1 && tx.vin[0].coinbase) continue;

      for (const vout of tx.vout) {
        const addr = vout.scriptPubKey.address;
        if (addr) {
          incomingSet.add(addr);
        }
        if (vout.scriptPubKey.addresses) {
          for (const a of vout.scriptPubKey.addresses) {
            incomingSet.add(a);
          }
        }
      }

      // –ò—Å—Ö–æ–¥—è—â–∏–µ (–≤ vin.addresses)
      for (const vin of tx.vin) {
        if (vin.addresses) {
          for (const addr of vin.addresses) {
            outgoingSet.add(addr);
          }
        }
      }
    }

    // –¢–µ–ø–µ—Ä—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º
    for (const addr of incomingSet) {
      const type = classifyAddress(addr);
      if (!type) continue;

      if (result[type].incoming) continue; // —É–∂–µ –µ—Å—Ç—å

      // –ü—Ä–æ–≤–µ—Ä–∏–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –∏ –≤ outgoing
      const isBoth = outgoingSet.has(addr);

      if (isBoth) {
        result[type].both = addr;
      } else {
        result[type].incoming = addr;
      }
    }

    // –î–æ–ø–æ–ª–Ω—è–µ–º outgoing, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
    for (const addr of outgoingSet) {
      const type = classifyAddress(addr);
      if (!type) continue;

      // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å both –∏–ª–∏ incoming ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if (result[type].both || result[type].incoming || result[type].outgoing) continue;

      // –ï—Å–ª–∏ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –ù–ï –≤ incoming ‚Äî —ç—Ç–æ —á–∏—Å—Ç—ã–π outgoing
      if (!incomingSet.has(addr)) {
        result[type].outgoing = addr;
      }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –≤ –≤–∏–¥–µ JSON-–æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('\nüì¨ –†–µ–∑—É–ª—å—Ç–∞—Ç (–∫–æ–ø–∏—Ä—É–π –≤ JSON):');

    for (const type of TYPES) {
      const entry = result[type];

      if (entry.both) {
        console.log(`
{
  "address": "${entry.both}",
  "name": "${entry.both}",
  "note": "${type} (both incoming and outgoing)"
},`);
      } else {
        if (entry.incoming) {
          console.log(`
{
  "address": "${entry.incoming}",
  "name": "${entry.incoming}",
  "note": "${type} (incoming)"
},`);
        }
        if (entry.outgoing) {
          console.log(`
{
  "address": "${entry.outgoing}",
  "name": "${entry.outgoing}",
  "note": "${type} (outgoing)"
},`);
        }
      }
    }
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message || error);
  }
}

main();
