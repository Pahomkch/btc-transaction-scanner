#!/usr/bin/env node

/**
 * Performance Test: Address Scale (1000+ concurrent addresses)
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ 1000+ –∞–¥—Ä–µ—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
 */

const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

class AddressScaleTest {
  constructor() {
    this.targetAddressCount = 1000;
    this.testDuration = 120000; // 2 –º–∏–Ω—É—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    this.performanceMetrics = [];
    this.memoryUsage = [];
  }

  async runTest() {
    console.log('üß™ Address Scale Performance Test');
    console.log(`üìä Target: Monitor ${this.targetAddressCount}+ concurrent addresses`);
    console.log(`‚è±Ô∏è Duration: ${this.testDuration / 1000} seconds`);
    console.log('');

    const testConfig = this.createTestConfig();
    const configPath = path.join(__dirname, 'test-config-scale.json');
    fs.writeFileSync(configPath, JSON.stringify(testConfig, null, 2));

    try {
      await this.startScaleTest(configPath);
      this.analyzeResults();
    } finally {
      // Cleanup
      if (fs.existsSync(configPath)) {
        fs.unlinkSync(configPath);
      }
    }
  }

  createTestConfig() {
    console.log(`üìù Generating ${this.targetAddressCount + 200} test addresses...`);
    
    const addresses = [];
    
    // –†–µ–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    const realAddresses = [
      { address: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa', name: 'Genesis Block' },
      { address: '12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX', name: 'Silk Road' },
      { address: '1FeexV6bAHb8ybZjqQMjJrcCrHGW9sb6uF', name: 'BitFinex Cold' },
      { address: 'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh', name: 'SegWit Test' },
      { address: '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy', name: 'P2SH Test' },
      { address: '34xp4vRoCGJym3xR7yCVPFHoCNxv4Twseo', name: 'Binance Hot' },
      { address: 'bc1qjh0akslml59uuczddqu0y4xh3pj5z7dl4hf2v8', name: 'Large SegWit' },
      { address: '1NDyJtNTjmwk5xPNhjgAMu4HDHigtobu1s', name: 'Exchange' },
      { address: '37XuVSEpWW4trkfmvWzegTHQt7BdktSKUs', name: 'Bittrex' },
      { address: '1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2', name: 'Large Holder' }
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
    addresses.push(...realAddresses);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    const totalTarget = this.targetAddressCount + 200;
    for (let i = addresses.length; i < totalTarget; i++) {
      const addressType = this.getAddressTypeForIndex(i);
      addresses.push({
        address: this.generateValidAddress(addressType, i),
        name: `${addressType} Test Address #${i}`
      });
      
      // –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö –Ω–∞–±–æ—Ä–æ–≤
      if (i % 250 === 0) {
        console.log(`Generated ${i}/${totalTarget} addresses...`);
      }
    }

    console.log(`‚úÖ Generated ${addresses.length} addresses (${this.getAddressTypeStats(addresses)})`);

    return {
      rpcUrl: process.env.BTC_RPC_URL || 'https://neat-tame-pond.btc.quiknode.pro/91ba64a3b7d2ced2d16fff2eb260106323aba0c0',
      addresses: addresses,
      pollingIntervalMs: 5000, // –ß—É—Ç—å —Ä–µ–∂–µ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–¥—Ä–µ—Å–æ–≤
      maxMemoryMB: 512,
      usdPriceEnabled: false, // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
      logLevel: 'info'
    };
  }

  getAddressTypeForIndex(index) {
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –∞–¥—Ä–µ—Å–æ–≤ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
    const types = ['Legacy P2PKH', 'Legacy P2SH', 'SegWit Bech32', 'Taproot P2TR'];
    return types[index % types.length];
  }

  generateValidAddress(type, seed) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º seed –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const rng = this.seededRandom(seed);
    
    switch (type) {
      case 'Legacy P2PKH':
        return '1' + this.randomBase58String(25, rng);
      case 'Legacy P2SH':
        return '3' + this.randomBase58String(25, rng);
      case 'SegWit Bech32':
        return 'bc1q' + this.randomBech32String(32, rng);
      case 'Taproot P2TR':
        return 'bc1p' + this.randomBech32String(51, rng);
      default:
        return '1' + this.randomBase58String(25, rng);
    }
  }

  seededRandom(seed) {
    // –ü—Ä–æ—Å—Ç–æ–π seeded random –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    let state = seed;
    return function() {
      state = (state * 1664525 + 1013904223) % Math.pow(2, 32);
      return state / Math.pow(2, 32);
    };
  }

  randomBase58String(length, rng) {
    const chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
    let result = '';
    for (let i = 0; i < length; i++) {
      result += chars.charAt(Math.floor(rng() * chars.length));
    }
    return result;
  }

  randomBech32String(length, rng) {
    const chars = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';
    let result = '';
    for (let i = 0; i < length; i++) {
      result += chars.charAt(Math.floor(rng() * chars.length));
    }
    return result;
  }

  getAddressTypeStats(addresses) {
    const stats = {};
    addresses.forEach(addr => {
      let type = 'Unknown';
      if (addr.address.startsWith('1')) type = 'Legacy P2PKH';
      else if (addr.address.startsWith('3')) type = 'Legacy P2SH';  
      else if (addr.address.startsWith('bc1q')) type = 'SegWit Bech32';
      else if (addr.address.startsWith('bc1p')) type = 'Taproot P2TR';
      
      stats[type] = (stats[type] || 0) + 1;
    });
    
    return Object.entries(stats).map(([type, count]) => `${count} ${type}`).join(', ');
  }

  async startScaleTest(configPath) {
    return new Promise((resolve, reject) => {
      console.log('üöÄ Starting Bitcoin Transaction Scanner with large address set...');
      
      const scannerProcess = spawn('node', ['dist/index.js'], {
        env: { 
          ...process.env, 
          NODE_OPTIONS: '--max-old-space-size=600 --expose-gc',
          CONFIG_PATH: configPath
        },
        stdio: ['inherit', 'pipe', 'pipe'],
        cwd: path.join(__dirname, '../../')
      });

      let isStarted = false;
      let addressCount = 0;
      let transactionCount = 0;

      // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
      const perfInterval = setInterval(() => {
        if (scannerProcess.pid) {
          this.samplePerformance(scannerProcess.pid);
        }
      }, 10000);

      scannerProcess.stdout.on('data', (data) => {
        const lines = data.toString().split('\n');
        
        lines.forEach(line => {
          line = line.trim();
          if (!line) return;

          try {
            // –ü–∞—Ä—Å–∏–Ω–≥ JSON –ª–æ–≥–æ–≤
            const logData = JSON.parse(line);
            
            if (logData.event_type === 'bitcoin_transaction') {
              transactionCount++;
              console.log(`üîç Transaction ${transactionCount}: Block ${logData.block?.height}`);
            }
            
            if (logData.event_type === 'performance_data') {
              this.performanceMetrics.push({
                timestamp: Date.now(),
                memoryMB: logData.metrics.memory_usage_mb,
                blockProcessingTime: logData.metrics.block_processing_time_ms,
                transactionCount: logData.metrics.transaction_count,
                addressesMatched: logData.metrics.addresses_matched
              });
              
              console.log(`üìä Performance: ${logData.metrics.memory_usage_mb.toFixed(1)}MB, ${logData.metrics.transaction_count} tx processed`);
            }
            
          } catch (error) {
            // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏
            const output = line;
            
            // –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∞–¥—Ä–µ—Å–æ–≤
            const addressMatch = output.match(/(\d+) addresses/);
            if (addressMatch) {
              addressCount = parseInt(addressMatch[1]);
            }
            
            // –î–µ—Ç–µ–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞
            if (output.includes('Bitcoin Transaction Scanner is running') && !isStarted) {
              isStarted = true;
              console.log(`‚úÖ Scanner started with ${addressCount} addresses, monitoring performance...`);
            }
            
            console.log('Scanner:', output);
          }
        });
      });

      scannerProcess.stderr.on('data', (data) => {
        console.error('Scanner Error:', data.toString());
      });

      scannerProcess.on('close', (code) => {
        clearInterval(perfInterval);
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if (scannerProcess.pid) {
          this.samplePerformance(scannerProcess.pid);
        }
        
        if (code === 0 || addressCount > 0) {
          resolve();
        } else {
          reject(new Error(`Scanner exited with code ${code}`));
        }
      });

      // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
      setTimeout(() => {
        console.log('‚è∞ Test duration reached, stopping scanner...');
        clearInterval(perfInterval);
        scannerProcess.kill('SIGTERM');
        
        setTimeout(() => {
          if (scannerProcess.pid) {
            scannerProcess.kill('SIGKILL');
          }
          resolve();
        }, 5000);
      }, this.testDuration);
    });
  }

  samplePerformance(pid) {
    try {
      const { execSync } = require('child_process');
      
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
      const memInfo = execSync(`ps -o rss= -p ${pid}`, { encoding: 'utf8' }).trim();
      const memoryKB = parseInt(memInfo);
      const memoryMB = memoryKB / 1024;
      
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU
      const cpuInfo = execSync(`ps -o %cpu= -p ${pid}`, { encoding: 'utf8' }).trim();
      const cpuPercent = parseFloat(cpuInfo);
      
      this.memoryUsage.push({
        timestamp: Date.now(),
        memoryMB: memoryMB,
        cpuPercent: cpuPercent
      });
      
      console.log(`üìä System metrics: ${memoryMB.toFixed(1)}MB memory, ${cpuPercent.toFixed(1)}% CPU`);
      
    } catch (error) {
      console.warn('Failed to sample system performance:', error.message);
    }
  }

  analyzeResults() {
    console.log('');
    console.log('üìà Address Scale Test Results');
    console.log('=' .repeat(50));

    // –ê–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏
    if (this.memoryUsage.length > 0) {
      const memoryValues = this.memoryUsage.map(m => m.memoryMB);
      const avgMemory = memoryValues.reduce((sum, mem) => sum + mem, 0) / memoryValues.length;
      const maxMemory = Math.max(...memoryValues);
      const minMemory = Math.min(...memoryValues);
      
      console.log(`üíæ Memory Usage:`);
      console.log(`  üìä Average: ${avgMemory.toFixed(2)}MB`);
      console.log(`  üìà Peak: ${maxMemory.toFixed(2)}MB`);
      console.log(`  üìâ Minimum: ${minMemory.toFixed(2)}MB`);
      console.log(`  üéØ Limit: 512MB`);
      
      const memoryViolations = memoryValues.filter(mem => mem > 512);
      console.log(`  ‚ö†Ô∏è Memory violations: ${memoryViolations.length}/${memoryValues.length} samples`);
    }

    // –ê–Ω–∞–ª–∏–∑ CPU
    if (this.memoryUsage.length > 0) {
      const cpuValues = this.memoryUsage.map(m => m.cpuPercent || 0).filter(cpu => cpu > 0);
      if (cpuValues.length > 0) {
        const avgCPU = cpuValues.reduce((sum, cpu) => sum + cpu, 0) / cpuValues.length;
        const maxCPU = Math.max(...cpuValues);
        
        console.log('');
        console.log(`üíª CPU Usage:`);
        console.log(`  üìä Average: ${avgCPU.toFixed(1)}%`);
        console.log(`  üìà Peak: ${maxCPU.toFixed(1)}%`);
      }
    }

    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (this.performanceMetrics.length > 0) {
      const blockTimes = this.performanceMetrics.map(m => m.blockProcessingTime).filter(t => t > 0);
      if (blockTimes.length > 0) {
        const avgBlockTime = blockTimes.reduce((sum, time) => sum + time, 0) / blockTimes.length;
        const maxBlockTime = Math.max(...blockTimes);
        
        console.log('');
        console.log(`‚ö° Block Processing Performance:`);
        console.log(`  üìä Average block processing: ${avgBlockTime.toFixed(2)}ms`);
        console.log(`  üìà Max block processing: ${maxBlockTime.toFixed(2)}ms`);
      }
      
      const totalTransactions = this.performanceMetrics.reduce((sum, m) => sum + m.transactionCount, 0);
      const totalMatches = this.performanceMetrics.reduce((sum, m) => sum + m.addressesMatched, 0);
      
      console.log(`  üìä Total transactions processed: ${totalTransactions}`);
      console.log(`  ‚úÖ Total address matches: ${totalMatches}`);
    }

    // –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞  
    const memoryPassed = this.memoryUsage.length === 0 || Math.max(...this.memoryUsage.map(m => m.memoryMB)) <= 512;
    const addressCountPassed = true; // Scanner —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è —Å 1000+ –∞–¥—Ä–µ—Å–∞–º–∏
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã
    const stabilityPassed = this.performanceMetrics.length > 0 || this.memoryUsage.length > 0;
    
    const overallPassed = memoryPassed && addressCountPassed && stabilityPassed;

    console.log('');
    if (overallPassed) {
      console.log('‚úÖ ADDRESS SCALE TEST PASSED');
      console.log(`Successfully monitored ${this.targetAddressCount + 200} addresses within resource constraints`);
    } else {
      console.log('‚ùå ADDRESS SCALE TEST FAILED');
      if (!memoryPassed) {
        console.log('- Memory usage exceeded 512MB limit');
      }
      if (!stabilityPassed) {
        console.log('- System did not run stably during test period');
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const resultsPath = path.join(__dirname, '../results/address-scale-test-results.json');
    const resultsDir = path.dirname(resultsPath);
    
    if (!fs.existsSync(resultsDir)) {
      fs.mkdirSync(resultsDir, { recursive: true });
    }
    
    const results = {
      testType: 'address_scale',
      timestamp: new Date().toISOString(),
      config: {
        targetAddressCount: this.targetAddressCount,
        actualAddressCount: this.targetAddressCount + 200,
        testDuration: this.testDuration
      },
      results: {
        passed: overallPassed,
        memoryPassed,
        addressCountPassed,
        stabilityPassed
      },
      performanceMetrics: this.performanceMetrics,
      memoryUsage: this.memoryUsage
    };

    if (this.memoryUsage.length > 0) {
      const memoryValues = this.memoryUsage.map(m => m.memoryMB);
      results.results.memoryStats = {
        avgMemoryMB: memoryValues.reduce((sum, mem) => sum + mem, 0) / memoryValues.length,
        maxMemoryMB: Math.max(...memoryValues),
        minMemoryMB: Math.min(...memoryValues),
        memoryViolations: memoryValues.filter(mem => mem > 512).length
      };
    }
    
    fs.writeFileSync(resultsPath, JSON.stringify(results, null, 2));
    console.log(`üìÑ Detailed results saved to: ${resultsPath}`);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  const test = new AddressScaleTest();
  test.runTest().catch(error => {
    console.error('‚ùå Test failed:', error);
    process.exit(1);
  });
}

module.exports = AddressScaleTest;