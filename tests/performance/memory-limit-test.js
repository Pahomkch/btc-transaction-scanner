#!/usr/bin/env node

/**
 * Performance Test: Memory Limit (512MB)
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø–∞–º—è—Ç–∏ 512MB –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–ª–æ–∫–æ–≤
 */

const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

class MemoryLimitTest {
  constructor() {
    this.maxMemoryMB = 512;
    this.testDuration = 60000; // 1 –º–∏–Ω—É—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    this.samplingInterval = 1000; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    this.memorySamples = [];
    this.peakMemory = 0;
  }

  async runTest() {
    console.log('üß™ Memory Limit Performance Test');
    console.log(`üìä Target: Maximum ${this.maxMemoryMB}MB memory usage`);
    console.log(`‚è±Ô∏è Duration: ${this.testDuration / 1000} seconds`);
    console.log('');

    // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–¥—Ä–µ—Å–æ–≤
    const testConfig = this.createTestConfig();
    const configPath = path.join(__dirname, 'test-config-memory.json');
    fs.writeFileSync(configPath, JSON.stringify(testConfig, null, 2));

    try {
      await this.startMemoryTest(configPath);
      this.analyzeResults();
    } finally {
      // Cleanup
      if (fs.existsSync(configPath)) {
        fs.unlinkSync(configPath);
      }
    }
  }

  createTestConfig() {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 1000+ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const addresses = [];

    // –†–µ–∞–ª—å–Ω—ã–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const realAddresses = [
      '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa', // Genesis
      '12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX', // Silk Road
      '1FeexV6bAHb8ybZjqQMjJrcCrHGW9sb6uF', // BitFinex
      'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh', // SegWit test
      '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy' // P2SH test
    ];

    realAddresses.forEach((addr, index) => {
      addresses.push({
        address: addr,
        name: `Test Address ${index + 1}`
      });
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 1000+
    for (let i = addresses.length; i < 1200; i++) {
      addresses.push({
        address: this.generateTestAddress(i),
        name: `Generated Test Address ${i}`
      });
    }

    return {
      rpcUrl: process.env.BTC_RPC_URL,
      addresses: addresses,
      pollingIntervalMs: 2000, // –ë–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      maxMemoryMB: this.maxMemoryMB,
      usdPriceEnabled: true,
      logLevel: 'info'
    };
  }

  generateTestAddress(index) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ Bitcoin –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const types = ['1', '3', 'bc1q'];
    const type = types[index % types.length];

    if (type === '1') {
      // Legacy P2PKH
      return '1' + this.randomString(25, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');
    } else if (type === '3') {
      // P2SH
      return '3' + this.randomString(25, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');
    } else {
      // SegWit Bech32
      return 'bc1q' + this.randomString(32, 'qpzry9x8gf2tvdw0s3jn54khce6mua7l');
    }
  }

  randomString(length, chars) {
    let result = '';
    for (let i = 0; i < length; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
  }

  async startMemoryTest(configPath) {
    return new Promise((resolve, reject) => {
      console.log('üöÄ Starting Bitcoin Transaction Scanner...');

      // –ó–∞–ø—É—Å–∫–∞–µ–º scanner –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å
      const scannerProcess = spawn('node', ['dist/index.js'], {
        env: {
          ...process.env,
          NODE_OPTIONS: '--max-old-space-size=600 --expose-gc'
        },
        stdio: ['inherit', 'pipe', 'pipe'],
        cwd: path.join(__dirname, '../../')
      });

      let isStarted = false;
      const startTime = Date.now();

      // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
      const memoryInterval = setInterval(() => {
        if (scannerProcess.pid) {
          this.sampleMemoryUsage(scannerProcess.pid);
        }
      }, this.samplingInterval);

      // –ß—Ç–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
      scannerProcess.stdout.on('data', (data) => {
        const output = data.toString();
        console.log('Scanner:', output.trim());

        if (output.includes('Bitcoin Transaction Scanner is running') && !isStarted) {
          isStarted = true;
          console.log('‚úÖ Scanner started successfully, monitoring memory...');
        }
      });

      scannerProcess.stderr.on('data', (data) => {
        console.error('Scanner Error:', data.toString());
      });

      scannerProcess.on('close', (code) => {
        clearInterval(memoryInterval);
        if (code === 0 || this.memorySamples.length > 0) {
          resolve();
        } else {
          reject(new Error(`Scanner exited with code ${code}`));
        }
      });

      // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
      setTimeout(() => {
        console.log('‚è∞ Test duration reached, stopping scanner...');
        clearInterval(memoryInterval);
        scannerProcess.kill('SIGTERM');

        setTimeout(() => {
          if (scannerProcess.pid) {
            scannerProcess.kill('SIGKILL');
          }
          resolve();
        }, 5000);
      }, this.testDuration);
    });
  }

  sampleMemoryUsage(pid) {
    try {
      const { execSync } = require('child_process');

      // –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ (RSS in KB)
      const memInfo = execSync(`ps -o rss= -p ${pid}`, { encoding: 'utf8' }).trim();
      const memoryKB = parseInt(memInfo);
      const memoryMB = memoryKB / 1024;

      this.memorySamples.push({
        timestamp: Date.now(),
        memoryMB: memoryMB
      });

      if (memoryMB > this.peakMemory) {
        this.peakMemory = memoryMB;
      }

      // Real-time –≤—ã–≤–æ–¥ –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø—Ä–µ–≤—ã—à–µ–Ω–∏–π
      if (memoryMB > this.maxMemoryMB * 1.1) {
        console.log(`‚ö†Ô∏è Memory spike detected: ${memoryMB.toFixed(2)}MB`);
      }

    } catch (error) {
      console.warn('Failed to sample memory usage:', error.message);
    }
  }

  analyzeResults() {
    console.log('');
    console.log('üìà Memory Test Results');
    console.log('=' .repeat(50));

    if (this.memorySamples.length === 0) {
      console.log('‚ùå No memory samples collected');
      return;
    }

    const avgMemory = this.memorySamples.reduce((sum, sample) => sum + sample.memoryMB, 0) / this.memorySamples.length;
    const violations = this.memorySamples.filter(sample => sample.memoryMB > this.maxMemoryMB);

    console.log(`üìä Samples collected: ${this.memorySamples.length}`);
    console.log(`üéØ Memory limit: ${this.maxMemoryMB}MB`);
    console.log(`üìà Peak memory usage: ${this.peakMemory.toFixed(2)}MB`);
    console.log(`üìä Average memory usage: ${avgMemory.toFixed(2)}MB`);
    console.log(`‚ö†Ô∏è Violations: ${violations.length} (${(violations.length / this.memorySamples.length * 100).toFixed(1)}%)`);

    // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if (violations.length > 0) {
      const maxViolation = Math.max(...violations.map(v => v.memoryMB));
      console.log(`üî¥ Maximum violation: ${maxViolation.toFixed(2)}MB`);
    }

    // –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    const passThreshold = 0.05; // –ú–∞–∫—Å–∏–º—É–º 5% –Ω–∞—Ä—É—à–µ–Ω–∏–π –¥–æ–ø—É—Å—Ç–∏–º–æ
    const violationRate = violations.length / this.memorySamples.length;

    if (this.peakMemory <= this.maxMemoryMB && violationRate <= passThreshold) {
      console.log('');
      console.log('‚úÖ MEMORY TEST PASSED');
      console.log(`Peak memory ${this.peakMemory.toFixed(2)}MB is within ${this.maxMemoryMB}MB limit`);
    } else {
      console.log('');
      console.log('‚ùå MEMORY TEST FAILED');
      if (this.peakMemory > this.maxMemoryMB) {
        console.log(`Peak memory ${this.peakMemory.toFixed(2)}MB exceeds ${this.maxMemoryMB}MB limit`);
      }
      if (violationRate > passThreshold) {
        console.log(`Violation rate ${(violationRate * 100).toFixed(1)}% exceeds ${(passThreshold * 100)}% threshold`);
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const resultsPath = path.join(__dirname, '../results/memory-test-results.json');
    const resultsDir = path.dirname(resultsPath);

    if (!fs.existsSync(resultsDir)) {
      fs.mkdirSync(resultsDir, { recursive: true });
    }

    fs.writeFileSync(resultsPath, JSON.stringify({
      testType: 'memory_limit',
      timestamp: new Date().toISOString(),
      config: {
        maxMemoryMB: this.maxMemoryMB,
        testDuration: this.testDuration,
        addressCount: 1200
      },
      results: {
        peakMemoryMB: this.peakMemory,
        avgMemoryMB: avgMemory,
        violations: violations.length,
        violationRate: violationRate,
        samples: this.memorySamples.length,
        passed: this.peakMemory <= this.maxMemoryMB && violationRate <= passThreshold
      },
      samples: this.memorySamples
    }, null, 2));

    console.log(`üìÑ Detailed results saved to: ${resultsPath}`);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  const test = new MemoryLimitTest();
  test.runTest().catch(error => {
    console.error('‚ùå Test failed:', error);
    process.exit(1);
  });
}

module.exports = MemoryLimitTest;
